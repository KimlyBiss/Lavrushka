import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    ConversationHandler,
    CallbackQueryHandler,
    ContextTypes
)
from sqlalchemy.orm import joinedload
from datetime import datetime
from database import Session, User, Playlist, Track
from config import Config

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
GET_NAME, GET_DESC = range(2)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)


async def format_duration(seconds: int) -> str:
    hours = seconds // 3600
    minutes = (seconds % 3600) // 60
    return f"{hours:02d}—á {minutes:02d}–º–∏–Ω"

# ========== –û–ë–ù–û–í–õ–ï–ù–ù–û–ï –ü–†–ò–í–ï–¢–°–¢–í–ò–ï ========== #
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "\U0001F3B5 *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –õ–∞–≤—Ä—É—à–∫—É!*\n\n"
        "_–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:_\n"
        "‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –ø–ª–µ–π–ª–∏—Å—Ç—ã\n"
        "‚Ä¢ –°–æ—Ö—Ä–∞–Ω—è—Ç—å –ª—é–±–∏–º—ã–µ —Ç—Ä–µ–∫–∏\n"
        "‚Ä¢ –£–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–µ–π –º—É–∑—ã–∫–∏\n\n"
        "‚ú® _–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏_"
    )
    await update.message.reply_text(text, parse_mode="Markdown")

# ========== –°–û–ó–î–ê–ù–ò–ï –ü–õ–ï–ô–õ–ò–°–¢–ê ========== #
async def new_playlist(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if query:
        await query.answer()
        await query.message.reply_text("\U0001F3B6 –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞:")
    else:
        await update.message.reply_text("\U0001F3B6 –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞:")
    return GET_NAME

async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['name'] = update.message.text.strip()
    await update.message.reply_text("\U0001F4DD –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–∏–ª–∏ /skip):")
    return GET_DESC

async def get_desc(update: Update, context: ContextTypes.DEFAULT_TYPE):
    desc = update.message.text.strip()
    name = context.user_data.get('name')
    user_data = update.effective_user
    
    with Session() as session:
        user = session.query(User).filter_by(tg_id=user_data.id).first()
        if not user:
            user = User(
                tg_id=user_data.id,
                first_name=user_data.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
                username=user_data.username
            )
            session.add(user)
            session.commit()
        
        playlist = Playlist(
            name=name,
            description=desc,
            user_id=user.id
        )
        session.add(playlist)
        session.commit()

    await update.message.reply_text(f"‚úÖ *–ü–ª–µ–π–ª–∏—Å—Ç ¬´{name}¬ª —Å–æ–∑–¥–∞–Ω!*", parse_mode="Markdown")
    return ConversationHandler.END

async def skip_desc(update: Update, context: ContextTypes.DEFAULT_TYPE):
    name = context.user_data.get('name')
    user_data = update.effective_user
    
    with Session() as session:
        user = session.query(User).filter_by(tg_id=user_data.id).first()
        if not user:
            user = User(
                tg_id=user_data.id,
                first_name=user_data.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
                username=user_data.username
            )
            session.add(user)
            session.commit()
        
        playlist = Playlist(
            name=name,
            user_id=user.id
        )
        session.add(playlist)
        session.commit()

    await update.message.reply_text(f"‚úÖ *–ü–ª–µ–π–ª–∏—Å—Ç ¬´{name}¬ª —Å–æ–∑–¥–∞–Ω!*", parse_mode="Markdown")
    return ConversationHandler.END

# ========== –ú–û–ò –ü–õ–ï–ô–õ–ò–°–¢–´ -> –í–°–ï –ü–õ–ï–ô–õ–ò–°–¢–´ ========== #
async def show_all_playlists(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if query:
        await query.answer()
        send = query.message.edit_text
    else:
        send = update.message.reply_text
        
    with Session() as session:
        playlists = session.query(Playlist).all()
        
        if not playlists:
            return await send("üì≠ –ü–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–ª–µ–π–ª–∏—Å—Ç–∞.")
            
        total_duration = sum(pl.duration for pl in playlists)
        text = (
            f"üìÇ *–í—Å–µ –ø–ª–µ–π–ª–∏—Å—Ç—ã*\n"
            f"‚îî –í—Å–µ–≥–æ: {len(playlists)}\n"
            f"‚îî –û–±—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {await format_duration(total_duration)}"
        )
        
        keyboard = [
            [InlineKeyboardButton(
                f"üìÄ {pl.name} [@{pl.user.username}]", 
                callback_data=f"plinfo_{pl.id}"
            )] 
            for pl in playlists
        ]
        keyboard.append([InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å —Å–≤–æ–π", callback_data="new_playlist")])
        
        await send(
            text,
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

# ========== –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ü–õ–ï–ô–õ–ò–°–¢–ï (–û–ë–©–ï–î–û–°–¢–£–ü–ù–ê–Ø) ========== #
async def show_playlist_info(update: Update, context: ContextTypes.DEFAULT_TYPE, playlist_id: int = None):
    query = update.callback_query
    await query.answer()
    
    playlist_id = int(query.data.split("_")[1])
    with Session() as session:
        playlist = session.get(Playlist, playlist_id)
        if not playlist:
            return await query.message.reply_text("‚ùå –ü–ª–µ–π–ª–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        
        is_owner = (playlist.user.tg_id == update.effective_user.id)
        
        duration = await format_duration(playlist.duration)
        created_at = playlist.created_at.strftime("%d.%m.%Y")
        tracks_count = len(playlist.tracks)
        owner_name = playlist.user.first_name or "–ê–Ω–æ–Ω–∏–º"
        
        text = (
            f"üéß *{playlist.name}*\n"
            f"_{playlist.description or '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}_\n\n"
            f"üìÖ –°–æ–∑–¥–∞–Ω: `{created_at}`\n"
            f"üé∂ –¢—Ä–µ–∫–æ–≤: `{tracks_count}`\n"
            f"üë§ –í–ª–∞–¥–µ–ª–µ—Ü: {owner_name}\n\n"
            f"‚öôÔ∏è *–î–µ–π—Å—Ç–≤–∏—è:*"
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = []
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
        keyboard.append([InlineKeyboardButton("‚ñ∂Ô∏è –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏", callback_data=f"play_{playlist.id}")])
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞
        if is_owner:
            keyboard.append([
                InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_{playlist.id}"),
                InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"del_{playlist.id}")
            ])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if playlist.cover_url:
            await query.message.reply_photo(
                photo=playlist.cover_url,
                caption=text,
                parse_mode="Markdown",
                reply_markup=reply_markup
            )
        else:
            await query.message.reply_text(
                text,
                parse_mode="Markdown",
                reply_markup=reply_markup
            )

# ========== –ó–ê–©–ò–©–ï–ù–ù–û–ï –£–î–ê–õ–ï–ù–ò–ï ========== #
async def confirm_delete(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    playlist_id = int(query.data.split("_")[1])
    
    with Session() as session:
        playlist = session.get(Playlist, playlist_id)
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞
        if playlist.user.tg_id != update.effective_user.id:
            return await query.message.reply_text("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —á—É–∂–æ–π –ø–ª–µ–π–ª–∏—Å—Ç!")
        
        name = playlist.name
        session.delete(playlist)
        session.commit()
    
    await query.message.reply_text(f"üóë *–ü–ª–µ–π–ª–∏—Å—Ç ¬´{name}¬ª —É–¥–∞–ª–µ–Ω!*", parse_mode="Markdown")

# ========== –ü–†–û–°–õ–£–®–ò–í–ê–ù–ò–ï ========== #
async def play_music(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    playlist_id = int(query.data.split("_")[1])
    with Session() as session:
        playlist = session.get(Playlist, playlist_id)
        if not playlist.tracks:
            return await query.message.reply_text("üòû –í –ø–ª–µ–π–ª–∏—Å—Ç–µ –Ω–µ—Ç —Ç—Ä–µ–∫–æ–≤.")
        for track in playlist.tracks:
            await context.bot.send_audio(
                chat_id=update.effective_chat.id,
                audio=track.file_id,
                title=track.title
            )

# ========== –î–û–ë–ê–í–õ–ï–ù–ò–ï –¢–†–ï–ö–ê ========== #
async def add_track(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message.audio:
        return await update.message.reply_text("‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª!")

    with Session() as session:
        user = session.query(User).filter_by(tg_id=update.effective_user.id).first()
        if not user or not user.playlists:
            return await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø–ª–µ–π–ª–∏—Å—Ç!")

        # –Ø–≤–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –ø–ª–µ–π–ª–∏—Å—Ç —Å —Ç—Ä–µ–∫–∞–º–∏
        playlist = session.query(Playlist).options(
            joinedload(Playlist.tracks)
        ).filter_by(id=user.playlists[0].id).first()

        track_title = update.message.audio.title or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
        track_duration = update.message.audio.duration or 0

        track = Track(
            title=track_title,
            file_id=update.message.audio.file_id,
            duration=track_duration,
            playlist_id=playlist.id
        )

        playlist.duration += track_duration
        session.add(track)
        session.commit()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–µ—Å—Å–∏–∏
        playlist_name = playlist.name
        total_duration = playlist.duration

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–Ω–µ —Å–µ—Å—Å–∏–∏
    await update.message.reply_text(
        f"üéµ *–¢—Ä–µ–∫ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!*\n\n"
        f"‚ñ´Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ: {track_title}\n"
        f"‚ñ´Ô∏è –ü–ª–µ–π–ª–∏—Å—Ç: {playlist_name}\n"
        f"‚ñ´Ô∏è –û–±—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {await format_duration(total_duration)}",
        parse_mode="Markdown"
    )

# ========== –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –ü–õ–ï–ô–õ–ò–°–¢–ê (–£–î–ê–õ–ï–ù–ò–ï –¢–†–ï–ö–û–í) ========== #
async def edit_playlist(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    playlist_id = int(query.data.split("_")[1])
    with Session() as session:
        playlist = session.get(Playlist, playlist_id)
            
        if not playlist.tracks:
            return await query.message.reply_text("üéµ –í –ø–ª–µ–π–ª–∏—Å—Ç–µ –Ω–µ—Ç —Ç—Ä–µ–∫–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            
        keyboard = [
            [InlineKeyboardButton(
                f"‚ùå {track.title} ({await format_duration(track.duration)})", 
                callback_data=f"deltrack_{track.id}"
            )] 
            for track in playlist.tracks
        ]
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"plinfo_{playlist.id}")])
        
        await query.message.edit_text(
            f"üéß –í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –ø–ª–µ–π–ª–∏—Å—Ç–∞ *{playlist.name}*:",
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

async def confirm_track_delete(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    track_id = int(query.data.split("_")[1])
    
    with Session() as session:
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–µ–∫ –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–π –ø–ª–µ–π–ª–∏—Å—Ç
            track = session.get(Track, track_id)
            if not track:
                await query.message.reply_text("‚ùå –¢—Ä–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                return

            playlist = track.playlist
            track_title = track.title
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç–∞
            playlist.duration -= track.duration
            
            # –£–¥–∞–ª—è–µ–º —Ç—Ä–µ–∫ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            session.delete(track)
            session.commit()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–ª–µ–π–ª–∏—Å—Ç–∞ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            playlist_id = playlist.id
            
        except Exception as e:
            session.rollback()
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç—Ä–µ–∫–∞: {e}")
            await query.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!")
            return

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± —É—Å–ø–µ—à–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏
    await query.message.reply_text(f"üóë –¢—Ä–µ–∫ *{track_title}* —É–¥–∞–ª–µ–Ω!", parse_mode="Markdown")
    
    # –í—ã–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–µ–π–ª–∏—Å—Ç–µ
    await show_playlist_info(update, context, playlist_id=playlist_id)

# ========== –ó–ê–ü–£–°–ö –ë–û–¢–ê ========== #
def main():
    app = ApplicationBuilder().token(Config.TG_TOKEN).build()

    # –ö–æ–º–∞–Ω–¥–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("all", show_all_playlists))
    app.add_handler(CommandHandler("add_track", lambda u, c: u.message.reply_text(
        "üéµ –ü—Ä–∏—à–ª–∏—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª ‚Äî –∏ —è –¥–æ–±–∞–≤–ª—é –µ–≥–æ –≤ –ø–ª–µ–π–ª–∏—Å—Ç!")))
    app.add_handler(CommandHandler("edit_playlist", edit_playlist))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–µ–π–ª–∏—Å—Ç–∞
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("new_playlist", new_playlist),
                      CallbackQueryHandler(new_playlist, pattern="^new_playlist$")],
        states={
            GET_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
            GET_DESC: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_desc),
                       CommandHandler("skip", skip_desc)]
        },
        fallbacks=[],
        per_user=True
    )
    app.add_handler(conv_handler)

    # CallbackQueryHandler –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    app.add_handler(CommandHandler("all", show_all_playlists))
    app.add_handler(CallbackQueryHandler(confirm_delete, pattern="^del_"))
    app.add_handler(CallbackQueryHandler(show_playlist_info, pattern="^plinfo_"))
    app.add_handler(CallbackQueryHandler(edit_playlist, pattern="^edit_"))
    app.add_handler(CallbackQueryHandler(confirm_track_delete, pattern="^deltrack_"))
    app.add_handler(CallbackQueryHandler(play_music, pattern="^play_"))

    # –ü—Ä–∏—ë–º –∞—É–¥–∏–æ
    app.add_handler(MessageHandler(filters.AUDIO, add_track))

    app.run_polling()

if __name__ == "__main__":
    main()
